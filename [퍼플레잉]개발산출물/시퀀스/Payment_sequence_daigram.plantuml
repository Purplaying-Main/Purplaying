@startuml
actor User
participant "Web Client" as C
participant "Purplaying Server" as S
database "Purplaying DB" as D

User -> C : 1.펀딩 선택 GET(/purplaying/{prdt_id})
activate C
C -> S : static asset(HTML,CSS,JS) 요청
activate S
S -> D : 선택한 펀딩,리워드,유저 데이터 요청
activate D
D --> S : Select prdt_id = {prdt_id}인 데이터 응답
deactivate D
S --> C : static asset(HTML,CSS,JS) 응답
deactivate S
C --> User : 조건에 맞는 펀딩 정보 응답
alt 펀딩 중
    alt 로그인 O
        alt 유저 = 창작자
            C --> User : 펀딩관리 버튼 활성
        else 유저 != 창작자
            C --> User : 펀딩하기 버튼 활성
        end
    else 로그인 X
    C --> User : 펀딩하기 버튼 활성
    end
else 펀딩 종료
    C --> User : 펀딩하기 버튼 비활성
end
User -> C : 2.리워드 선택
C --> User : 선택한 리워드 출력
deactivate C

newpage
== 펀딩결제 ==
User -> C : 3.펀딩하기 버튼 클릭\nGET(/payment/{prdt_id}) 
activate C
alt 로그인 X
    C -> C : 로그인 페이지로 리다이렉트
    User -> C : 로그인 정보 입력
    C -> S : 로그인 정보 전달
    activate S
    S -> D : 로그인 정보 전달
    activate D
    D --> S : 유저 정보 응답
    deactivate D
    S -> S : 로그인 = 유저 정보 일치 확인
else 로그인 O
    alt 리워드 선택 안함
        C-->User : 리워드 선택 alert 호출
    else 리워드 재고 초과
        C-->User : 리워드 수량 재설정 alert 호출
    else 유저 포인트 부족
        C-->User : 포인트 충전 modal 호출
    end
end
C -> S : 펀딩결제 static asset(HTML,CSS,JS) 요청
S -> D : 해당 펀딩, 리워드, 유저 데이터 요청
D -> S : Select 펀딩, 리워드, 유저 데이터 응답
deactivate D
S --> C :  펀딩결제 static asset(HTML,CSS,JS) 응답
deactivate S
C --> User : 펀딩결제 페이지 노출
deactivate C

newpage
User -> C : 4.펀딩하기 폼 작성 & 제출\nPOST(/paymentCompleted/{prdt_id})
activate C
C -> S : 펀딩완료 static asset(HTML,CSS,JS) 요청
activate S
S -> D : 작성된 폼 정보 Insert
activate D
D -> D : UPDATE\n (+)후원자수,현재금액\n(-)리워드수량,포인트 \nInsert 결제
D --> S : Select 해당 펀딩, 리워드, 결제, 유저 데이터 응답
deactivate D
S --> C : 펀딩완료 static asset(HTML,CSS,JS) 응답
deactivate S
C --> User : 펀딩완료 페이지 노출
deactivate C


@enduml